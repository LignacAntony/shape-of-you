name: "CI"

on:
  push:
  workflow_dispatch:

jobs:
  deps:
    name: "Install Dependencies"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup PHP Environment"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer

      - name: "Cache vendor"
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: "Setup Environment"
        run: |
          echo "APP_ENV=test" >> .env
          echo "POSTGRES_VERSION=${{ secrets.POSTGRES_VERSION }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "ADMINER_PORT=${{ secrets.ADMINER_PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          cat .env

      - name: "Install Dependencies"
        run: composer install --prefer-dist --no-interaction --no-progress

  php-code-sniffer:
    name: "PHP-Code-Sniffer"
    needs: deps
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup PHP Environment"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer

      - name: "Restore vendor cache"
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: "Run PHP Code Sniffer"
        run: vendor/bin/phpcs || true


  php-stan:
    name: "PHP-Stan"
    needs: deps
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup PHP Environment"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer

      - name: "Restore vendor cache"
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: "Run PHP Stan"
        run: composer analyse --memory-limit=1G

  phpunit:
    name: "PHPUnit Tests"
    needs: deps
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup PHP Environment"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer
          extensions: pdo_pgsql

      - name: "Restore vendor cache"
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: "Setup Environment"
        run: |
          echo "APP_ENV=test" >> .env
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}?serverVersion=15&charset=utf8" >> .env

      - name: "Create Database"
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:schema:create --env=test

      - name: "Run PHPUnit Tests"
        run: vendor/bin/phpunit

  # docker-install:
  #   name: "Docker Install"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Checkout repository"
  #       uses: actions/checkout@v2
  #     - name: Install Docker using Docker's official script
  #       run: |
  #         curl -fsSL https://get.docker.com -o get-docker.sh
  #         sudo sh get-docker.sh
  #       continue-on-error: false
  #     - name: "Install Docker Compose"
  #       run: |
  #         sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #         sudo chmod +x /usr/local/bin/docker-compose
  #         docker-compose --version
  #       continue-on-error: false
  #     - name: "Docker up"
  #       env:
  #         POSTGRES_VERSION: ${{ secrets.POSTGRES_VERSION }}
  #         POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  #         POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #         ADMINER_PORT: ${{ secrets.ADMINER_PORT }}
  #       run: docker-compose -f docker-compose.yaml -f docker-compose.override.yaml up -d
  #       continue-on-error: false
  #     - name: "Docker shows running containers"
  #       run: docker ps -a
  #       continue-on-error: false
