---
- name: Installer les dépendances Composer
  ansible.builtin.composer:
    command: install
    working_dir: "{{ symfony_root_dir }}"
    no_dev: false
  register: composer_result
  changed_when: composer_result.changed

- name: Créer ou mettre à jour le fichier .env.local
  ansible.builtin.copy:
    content: |
      ###> doctrine/doctrine-bundle ###
      DATABASE_URL="postgresql://{{ postgres_user }}:{{ postgres_password }}@127.0.0.1:{{ postgres_port }}/{{ postgres_db }}?\
      serverVersion={{ postgres_version }}&charset=utf8"
      ###< doctrine/doctrine-bundle ###
    dest: "{{ symfony_root_dir }}/.env.local"
    mode: '0644'

- name: Exécuter les migrations de base de données Symfony
  ansible.builtin.command:
    cmd: php bin/console doctrine:migrations:migrate --no-interaction
    chdir: "{{ symfony_root_dir }}"
  register: command_result
  changed_when: "'No migrations to execute' not in command_result.stdout"

- name: Installer les dépendances NPM
  ansible.builtin.command: npm install
  args:
    chdir: "{{ symfony_root_dir }}"
  register: npm_result
  changed_when: npm_result.stdout is defined and npm_result.stdout != ""

- name: Compiler les assets frontend
  ansible.builtin.command: npm run build
  args:
    chdir: "{{ symfony_root_dir }}"
  register: build_result
  changed_when: build_result.stdout is defined and build_result.stdout != ""

- name: Vérifier que l'application Symfony est accessible
  ansible.builtin.uri:
    url: "http://{{ web_server_name }}:8080"
    return_content: true
    validate_certs: false
    follow_redirects: true
  register: webpage
  until: webpage.status == 200
  retries: 6
  delay: 5
  failed_when: webpage.status != 200
